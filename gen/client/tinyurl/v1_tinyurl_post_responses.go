// Code generated by go-swagger; DO NOT EDIT.

package tinyurl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/LochanRn/tiny-url-api/gen/models"
)

// V1TinyurlPostReader is a Reader for the V1TinyurlPost structure.
type V1TinyurlPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1TinyurlPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1TinyurlPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewV1TinyurlPostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewV1TinyurlPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewV1TinyurlPostOK creates a V1TinyurlPostOK with default headers values
func NewV1TinyurlPostOK() *V1TinyurlPostOK {
	return &V1TinyurlPostOK{}
}

/*
V1TinyurlPostOK describes a response with status code 200, with default header values.

OK
*/
type V1TinyurlPostOK struct {
	Payload *V1TinyurlPostOKBody
}

// IsSuccess returns true when this v1 tinyurl post o k response has a 2xx status code
func (o *V1TinyurlPostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 tinyurl post o k response has a 3xx status code
func (o *V1TinyurlPostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 tinyurl post o k response has a 4xx status code
func (o *V1TinyurlPostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 tinyurl post o k response has a 5xx status code
func (o *V1TinyurlPostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 tinyurl post o k response a status code equal to that given
func (o *V1TinyurlPostOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 tinyurl post o k response
func (o *V1TinyurlPostOK) Code() int {
	return 200
}

func (o *V1TinyurlPostOK) Error() string {
	return fmt.Sprintf("[POST /v1/tinyurl][%d] v1TinyurlPostOK  %+v", 200, o.Payload)
}

func (o *V1TinyurlPostOK) String() string {
	return fmt.Sprintf("[POST /v1/tinyurl][%d] v1TinyurlPostOK  %+v", 200, o.Payload)
}

func (o *V1TinyurlPostOK) GetPayload() *V1TinyurlPostOKBody {
	return o.Payload
}

func (o *V1TinyurlPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(V1TinyurlPostOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1TinyurlPostInternalServerError creates a V1TinyurlPostInternalServerError with default headers values
func NewV1TinyurlPostInternalServerError() *V1TinyurlPostInternalServerError {
	return &V1TinyurlPostInternalServerError{}
}

/*
V1TinyurlPostInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1TinyurlPostInternalServerError struct {
	Payload *models.V1InternalServerError
}

// IsSuccess returns true when this v1 tinyurl post internal server error response has a 2xx status code
func (o *V1TinyurlPostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 tinyurl post internal server error response has a 3xx status code
func (o *V1TinyurlPostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 tinyurl post internal server error response has a 4xx status code
func (o *V1TinyurlPostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 tinyurl post internal server error response has a 5xx status code
func (o *V1TinyurlPostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 tinyurl post internal server error response a status code equal to that given
func (o *V1TinyurlPostInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 tinyurl post internal server error response
func (o *V1TinyurlPostInternalServerError) Code() int {
	return 500
}

func (o *V1TinyurlPostInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/tinyurl][%d] v1TinyurlPostInternalServerError  %+v", 500, o.Payload)
}

func (o *V1TinyurlPostInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/tinyurl][%d] v1TinyurlPostInternalServerError  %+v", 500, o.Payload)
}

func (o *V1TinyurlPostInternalServerError) GetPayload() *models.V1InternalServerError {
	return o.Payload
}

func (o *V1TinyurlPostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1TinyurlPostDefault creates a V1TinyurlPostDefault with default headers values
func NewV1TinyurlPostDefault(code int) *V1TinyurlPostDefault {
	return &V1TinyurlPostDefault{
		_statusCode: code,
	}
}

/*
V1TinyurlPostDefault describes a response with status code -1, with default header values.

generic error response
*/
type V1TinyurlPostDefault struct {
	_statusCode int

	Payload *models.V1DomainsShorternedDefaultBody
}

// IsSuccess returns true when this v1 tinyurl post default response has a 2xx status code
func (o *V1TinyurlPostDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this v1 tinyurl post default response has a 3xx status code
func (o *V1TinyurlPostDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this v1 tinyurl post default response has a 4xx status code
func (o *V1TinyurlPostDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this v1 tinyurl post default response has a 5xx status code
func (o *V1TinyurlPostDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this v1 tinyurl post default response a status code equal to that given
func (o *V1TinyurlPostDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the v1 tinyurl post default response
func (o *V1TinyurlPostDefault) Code() int {
	return o._statusCode
}

func (o *V1TinyurlPostDefault) Error() string {
	return fmt.Sprintf("[POST /v1/tinyurl][%d] V1TinyurlPost default  %+v", o._statusCode, o.Payload)
}

func (o *V1TinyurlPostDefault) String() string {
	return fmt.Sprintf("[POST /v1/tinyurl][%d] V1TinyurlPost default  %+v", o._statusCode, o.Payload)
}

func (o *V1TinyurlPostDefault) GetPayload() *models.V1DomainsShorternedDefaultBody {
	return o.Payload
}

func (o *V1TinyurlPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1DomainsShorternedDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
V1TinyurlPostOKBody v1 tinyurl post o k body
swagger:model V1TinyurlPostOKBody
*/
type V1TinyurlPostOKBody struct {

	// creation timestamp
	// Format: date-time
	CreationTimestamp models.V1Time `json:"creationTimestamp,omitempty"`

	// tinyurl
	Tinyurl string `json:"tinyurl,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this v1 tinyurl post o k body
func (o *V1TinyurlPostOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *V1TinyurlPostOKBody) validateCreationTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(o.CreationTimestamp) { // not required
		return nil
	}

	if err := o.CreationTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("v1TinyurlPostOK" + "." + "creationTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("v1TinyurlPostOK" + "." + "creationTimestamp")
		}
		return err
	}

	return nil
}

// ContextValidate validate this v1 tinyurl post o k body based on the context it is used
func (o *V1TinyurlPostOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCreationTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *V1TinyurlPostOKBody) contextValidateCreationTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(o.CreationTimestamp) { // not required
		return nil
	}

	if err := o.CreationTimestamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("v1TinyurlPostOK" + "." + "creationTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("v1TinyurlPostOK" + "." + "creationTimestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *V1TinyurlPostOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *V1TinyurlPostOKBody) UnmarshalBinary(b []byte) error {
	var res V1TinyurlPostOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
